member(index0 [, index1] [, ...])
---


Returns a pointer to a member object. The first index is always numerical, since all
pointers may be treated as variable-sized arrays. For pointers that are not variable-sized
arrays, _index0_ should be zero.

_index1_ can be an integer or a string, depending on the kind of object being pointed to.
If the pointer points to a struct or union, _index1_ may be a string identifying the
member of the struct or union. If the pointer points to a fixed- or variable-sized array,
_index1_ should be an integer, identifying the element of the array.

The maximal number of indices is equal to the level of indirection plus array dimensionality
plus the level of struct / union nesting.

Struct and union members may also be referenced by integers, in which case the number identifies
the member by its zero-based order in the struct or union declaration.

Since there is no general way of telling the size of a variable-sized array and since fixed-size
arrays are sometimes declared with smaller than actual dimensions, there is no range-checking
of numerical indices to arrays.

String indices that do not correspond to member names in structs / unions and numerical
indices smaller than zero or greater than or equal to the number of struct / union members
cause a ReferenceError to be raised.

Example
---


var x=new Pointer( clib['struct stat'] );
clib.stat( "/tmp/file", x );
print( x.member( 0, 'st_uid' ).$ );

NOTE
---


Pointers to objects in dynamic libraries are not resolved before they are needed.
Calling _member_ does not logically require it, but it does force resolution of the pointer.

