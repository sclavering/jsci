Type
----

Type objects represent C types, used for calling native functions in dynamic libraries.

Type() cannot be called directly.  Instead use the properties like Type.int, and the methods like Type.array() and Type['function']()


Type objects representing basic C types are available as properties on Type, with the obvious meanings:

Type.char                    C "char"
Type.double                  C "double"
Type.float                   C "float"
Type.int                     C "int"
Type.int64                   C "int64"
Type.long                    C "long"
Type.long_double             C "long double"
Type.long_long               C "long long"
Type.short                   C "short"
Type.signed_char             C "signed char"
Type.signed_int              C "signed int"
Type.signed_int64            C "signed int64"
Type.signed_long             C "signed long"
Type.signed_long_long        C "signed long long"
Type.signed_short            C "signed short"
Type.unsigned_char           C "unsigned char"
Type.unsigned_int            C "unsigned int"
Type.unsigned_int64          C "unsigned int64"
Type.unsigned_long           C "unsigned long"
Type.unsigned_long_long      C "unsigned long long"
Type.unsigned_short          C "unsigned short"
Type.valist                  C "valist"
Type.void                    C "void"

(Note that you must write Type["void"] rather than Type.void, because "void" is a reserved word in javascript.)

Type objects representing C structs, unions, functions, pointers, and fixed-length arrays are acquired by calling methods on Type.


Type.array(type, length)
------------------------

Creates a new Type object representing a fixed-size array.  The first argument is the Type of array elements, and the second is the number of elements.


Type.bitfield(type, length)
---------------------------

Creates a new Type object representing a bitfield.  The first argument is the base integer type and the second is the number of bits.


Type.function(returnType, params)
----------------------------------------------------------

Creates a new Type object representing a function.

* returnType: A Type object
* params: an array of Type objects

Types created with this function have read-only numeric properties containing the argument objects passed to this function.  There is also a .returnType property;

All function types are assumed to be cdecl (rather than e.g. stdcall).

If params is an empty array that represents a zero-argument C function (e.g "int myfunc(void);"), not a varags function (which are not supported).


Type.pointer(t)
---------------

Creates a new Type object representing a pointer. The argument is the Type being pointed to.

Types created with this function have a read-only property named "0" which contains the type it points to.


Type.struct(member0, member1, ...)
----------------------------------

Creates a new Type object representing a struct.  The member arguments should be objects containing two properties: .name and .type. The .type property should be a Type object.

Types created with this function have read-only properties with the same names as the members, containing the argument objects passed to this function.  Struct types also have read-only properties named 0 through n, which point to the same objects.


Type.union(member0, member1, ...)
---------------------------------

Creates a new Type object representing a union. The member arguments should be objects containing two properties: .name and .type. The .type property should be a Type object.


Type.sizeof(type)
---------------------

Returns the size, in bytes, of the C type represented by the passed Type instance.
